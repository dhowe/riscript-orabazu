import{CstParser as S}from"chevrotain";var t=class extends S{constructor(E){super(E,{nodeLocationTracking:"full"}),this.atomTypes=["silent","assign","symbol","choice","pgate","text","entity"],this.buildRules()}parse(E){this.input=E.tokens;let U=this.script();if(this.errors.length>0)throw Error(`[PARSING]
`+this.errors[0].message);return U}buildRules(){let E=this,U=this.tokensMap;E.RULE("script",()=>{E.MANY(()=>E.SUBRULE(E.expr))}),E.RULE("pgate",()=>{E.CONSUME(U.PendingGate),E.MANY(()=>E.CONSUME(U.TF))}),E.RULE("entity",()=>{E.CONSUME(U.Entity)}),E.RULE("gate",()=>{E.CONSUME(U.EnterGate),E.MANY(()=>E.CONSUME(U.Gate)),E.CONSUME(U.ExitGate)}),E.RULE("silent",()=>{E.CONSUME(U.OS),E.OPTION1(()=>E.SUBRULE(E.gate)),E.CONSUME(U.SYM),E.OPTION2(()=>{E.CONSUME(U.EQ),E.SUBRULE(E.expr)}),E.CONSUME(U.CS)}),E.RULE("assign",()=>{E.CONSUME(U.SYM),E.CONSUME(U.EQ),E.SUBRULE(E.expr)}),E.RULE("symbol",()=>{E.CONSUME(U.SYM),E.MANY(()=>E.CONSUME(U.TF))}),E.RULE("accept",()=>{E.SUBRULE(E.or_expr)}),E.RULE("reject",()=>{E.SUBRULE(E.or_expr)}),E.RULE("or_expr",()=>{E.MANY_SEP({SEP:U.OR,DEF:()=>E.SUBRULE(E.wexpr)})}),E.RULE("choice",()=>{E.CONSUME(U.OC),E.OPTION1(()=>E.SUBRULE(E.gate)),E.SUBRULE(E.accept),E.OPTION2(()=>{E.CONSUME(U.ELSE),E.SUBRULE(E.reject)}),E.CONSUME(U.CC),E.MANY(()=>E.CONSUME(U.TF))}),E.RULE("wexpr",()=>{E.MANY(()=>{E.OR([{ALT:()=>E.SUBRULE(E.expr)},{ALT:()=>E.CONSUME(U.Weight)}])})}),E.RULE("expr",()=>{E.AT_LEAST_ONE(()=>E.SUBRULE(E.atom))}),E.RULE("atom",()=>{E.OR(this.atomTypes.map(e=>({ALT:()=>E.SUBRULE(E[e])})))}),E.RULE("text",()=>{E.CONSUME(U.Raw)}),this.performSelfAnalysis()}};export{t as RiScriptParser};
